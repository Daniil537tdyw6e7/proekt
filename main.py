#!/usr/bin/python

from telebot import types
from datetime import datetime, timedelta
import threading
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot
import random
import os
import io
import numpy as np
from PIL import Image, ImageOps
import tensorflow as tf
from PIL import Image
import io
import logging
from queue import Queue
import zipfile
from datetime import timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import logging

    # –ó–∞–º–µ–Ω–∏ 'TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
    # –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç BotFather, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å
bot = telebot.TeleBot("")
    
@bot.message_handler(commands=['start'])
def send_welcome(message):
    image_paths = ["images/4.jpg", "images/24.jpg", "images/25.jpg", "images/26.jpg", "images/27.jpg"]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    selected_image = random.choice(image_paths)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    with open(selected_image, "rb") as f:
        bot.send_photo(
            message.chat.id, 
            f,
            caption= "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç.\
–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ.\
–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–∑–Ω–æ–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–ø–∏—à–∏ /help!"
        )           


@bot.message_handler(commands=['hello']) 
def send_bye(message):
    image_paths = ["images/1.jpg", "images/16.jpg", "images/17.jpg", "images/18.jpg", "images/19.jpg"]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    selected_image = random.choice(image_paths)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    with open(selected_image, "rb") as f:
        bot.send_photo(
            message.chat.id, 
            f,
            caption= "–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
        )           

@bot.message_handler(commands=['bye'])
def send_bye(message):
    image_paths = ["images/12.jpg", "images/2.jpg", "images/13.jpg"]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    selected_image = random.choice(image_paths)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    with open(selected_image, "rb") as f:
        bot.send_photo(
            message.chat.id, 
            f,
            caption="–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!"
        )
        
@bot.message_handler(commands=['g'])
def send_welcome(message):
    bot.send_message(message.chat.id, message.text.replace('/g ', ''))
    bot.delete_message(message.chat.id, message.id)

    
@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_member(message):
    if message.json['new_chat_participant']['id'] == 7742495416:
        bot.send_message(message.chat.id, "–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç,\
—è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ.\
—á—Ç–æ–±—ã –ø–æ–ª—É—á—à–µ –æ –Ω–∏—Ö —É–∑–Ω–∞—Ç—å, –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç -     –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\
             ")

@bot.message_handler(commands=['help'])
def send_bye(message):
    image_paths = ["images/3.jpg", "images/20.jpg", "images/21.jpg", "images/22.jpg", "images/23.jpg"]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    selected_image = random.choice(image_paths)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    with open(selected_image, "rb") as f:
        bot.send_photo(
            message.chat.id, 
            f,
            caption= "–º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\
\n\n /hello\
\n /bye\
\n     "
        ) 

@bot.message_handler(commands=['sayt'])
def send_bye(message):
    image_paths = ["images/28.png", "images/29.jpg", "images/30.jpg", "images/31.jpg", "images/5.jpg"]  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    selected_image = random.choice(image_paths)  # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    with open(selected_image, "rb") as f:
        bot.send_photo(
            message.chat.id, 
            f,
            caption= "–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç –º–æ–π —Å–∞–π—Ç - http://127.0.0.1:5000"
        ) 


hug_images = [
    "images/6.jpg",
    "images/32.jpg",
    "images/33.jpg",
    "images/34.jpg",
    "images/35.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '–æ–±–Ω—è—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"{current_user} –æ–±–Ω—è–ª(-–∞) {replied_user} ü§ó"
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(hug_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
rt_images = [
    "images/36.jpg",
    "images/37.jpg",
    "images/38.jpg",
    "images/39.jpg",
    "images/7.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '—É–¥–∞—Ä–∏—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"üëä {current_user} —É–¥–∞—Ä–∏–ª(-–∞) {replied_user} "
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(rt_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
re_images = [
    "images/11.jpg",
    "images/52.jpg",
    "images/53.jpg",
    "images/54.jpg",
    "images/55.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '—É–±–∏—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"üî™ {current_user} —É–±–∏–ª(-–∞) {replied_user}"
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(re_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
oi_images = [
    "images/10.jpg",
    "images/48.jpg",
    "images/49.jpg",
    "images/50.jpg",
    "images/51.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '—Ç—ã–∫–Ω—É—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"ü•¢ {current_user} —Ç—ã–∫–Ω—É–ª(-–∞) {replied_user} "
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(oi_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)

# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
gh_images = [
    "images/9.jpg",
    "images/44.jpg",
    "images/45.jpg",
    "images/46.jpg",
    "images/47.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '–≤–∑–æ—Ä–≤–∞—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"üß® {current_user} –≤–∑–æ—Ä–≤–∞–ª(-–∞) {replied_user} "
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(gh_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)


# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
ty_images = [
    "images/8.jpg",
    "images/40.jpg",
    "images/41.jpg",
    "images/42.jpg",
    "images/43.jpg"
    # –î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ —É–±–µ—Ä–∏—Ç–µ –ø—É—Ç–∏ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é
]

@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '—É–ª–µ—Ç–µ—Ç—å' in msg.text.lower())
def hug_reply(message):
    replied_user = message.reply_to_message.from_user.first_name
    current_user = message.from_user.first_name
    
    # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text_response = f"üõ¨ {current_user} —É–ª–µ—Ç–µ–ª(-–∞) –±–µ–∑ {replied_user} "
    
    try:
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        selected_image = random.choice(ty_images)
        
        with open(selected_image, "rb") as f:
            bot.send_photo(
                message.chat.id,
                telebot.types.InputFile(f),
                caption=text_response
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        bot.reply_to(message, text_response)

marriages = {}  # user_id: spouse_id
pending_proposals = {}  # target_id: (proposer_id, message_info)


@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '–±—Ä–∞–∫' in msg.text.lower())
def marry(message):
    proposer_id = message.from_user.id

    if not message.reply_to_message:
        bot.reply_to(message, "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π –±—Ä–∞–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target = message.reply_to_message.from_user
    target_id = target.id

    if proposer_id == target_id:
        bot.reply_to(message, "ü§® –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        return

    if proposer_id in marriages:
        bot.reply_to(message, "‚ùó –¢—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ.")
        return

    if target_id in marriages:
        bot.reply_to(message, "‚ùó –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±—Ä–∞–∫–µ.")
        return

    if target_id in pending_proposals:
        bot.reply_to(message, "‚ùó –≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚ô•Ô∏è", callback_data=f"accept_{target_id}"),
        InlineKeyboardButton("üíî", callback_data=f"decline_{target_id}")
    )

    sent = bot.send_message(
        message.chat.id,
        f"üíç {message.from_user.first_name} —Å–¥–µ–ª–∞–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ {target.first_name}!\
\n‚Ä¢ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è - ‚ù§Ô∏è\
\n‚Ä¢ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è - üíî",
        reply_markup=markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ–æ—Ç–∫–∞–∑
    pending_proposals[target_id] = (proposer_id, (sent.chat.id, sent.message_id))
    threading.Thread(target=auto_decline, args=(target_id,), daemon=True).start()


def auto_decline(target_id):
    time.sleep(3600)  # 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥
    if target_id in pending_proposals:
        proposer_id, (chat_id, msg_id) = pending_proposals.pop(target_id)
        bot.edit_message_text(
            f"‚åõ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={target_id}'>–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª</a>.",
            chat_id=chat_id,
            message_id=msg_id,
            parse_mode='HTML'
        )


@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_') or call.data.startswith('decline_'))
def handle_proposal_response(call):
    action, target_id_str = call.data.split("_", 1)
    target_id = int(target_id_str)

    if call.from_user.id != target_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–ª—è —Ç–µ–±—è.")
        return

    if target_id not in pending_proposals:
        bot.answer_callback_query(call.id, "‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        return

    proposer_id, (chat_id, msg_id) = pending_proposals.pop(target_id)

    if action == "accept":
        marriages[proposer_id] = target_id
        marriages[target_id] = proposer_id

        bot.edit_message_text(
            f"üéâ <a href='tg://user?id={target_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∏ <a href='tg://user?id={proposer_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ!",
            chat_id=chat_id,
            message_id=msg_id,
            parse_mode='HTML'
        )
    elif action == "decline":
        bot.edit_message_text(
            f"üíî <a href='tg://user?id={target_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –æ—Ç–∫–∞–∑–∞–ª(–∞) <a href='tg://user?id={proposer_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> –≤ –±—Ä–∞–∫–µ.",
            chat_id=chat_id,
            message_id=msg_id,
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda msg: msg.reply_to_message is not None and '—Ä–∞' in msg.text.lower())
def handle_divorce(message):
    user_id = message.from_user.id

    if user_id not in marriages:
        bot.reply_to(message, "‚ùó –¢—ã –Ω–µ –≤ –±—Ä–∞–∫–µ.")
        return

    spouse_id = marriages.pop(user_id)
    marriages.pop(spouse_id, None)

    try:
        user_info = bot.get_chat(user_id)
        spouse_info = bot.get_chat(spouse_id)

        user_tag = f"<a href='tg://user?id={user_id}'>@{user_info.username}</a>" if user_info.username else f"<a href='tg://user?id={user_id}'>{user_info.first_name}</a>"
        spouse_tag = f"<a href='tg://user?id={spouse_id}'>@{spouse_info.username}</a>" if spouse_info.username else f"<a href='tg://user?id={spouse_id}'>{spouse_info.first_name}</a>"

        text = f"üíî {user_tag} —Ä–∞–∑–≤—ë–ª—Å—è(–ª–∞—Å—å) —Å {spouse_tag}."
    except:
        text = f"üíî <a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–≤—ë–ª—Å—è(–ª–∞—Å—å) —Å <a href='tg://user?id={spouse_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</a>."

    bot.send_message(message.chat.id, text, parse_mode='HTML')

@bot.message_handler(commands=['–±—Ä–∞–∫–∏'])
def list_marriages(message):
    if not marriages:
        bot.reply_to(message, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞.")
        return

    @bot.message_handler(commands=['marriages'])
    def handle_marriages(message):
        if not marriages:
            bot.send_message(message.chat.id, "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—Ä–∞–∫–∞.")
        return

    listed = set()
    result = "üíñ <b>–°–ø–∏—Å–æ–∫ –±—Ä–∞–∫–æ–≤:</b>\n"

    for user_id, spouse_id in marriages.items():
        if user_id in listed or spouse_id in listed:
            continue

        try:
            user = bot.get_chat(user_id)
            spouse = bot.get_chat(spouse_id)

            user_name = user.first_name
            spouse_name = spouse.first_name

            result += (
                f"‚Ä¢ <a href='tg://user?id={user_id}'>{user_name}</a> ‚ù§Ô∏è "
                f"<a href='tg://user?id={spouse_id}'>{spouse_name}</a>\n"
            )

        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
            result += (
                f"‚Ä¢ <a href='tg://user?id={user_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚ù§Ô∏è "
                f"<a href='tg://user?id={spouse_id}'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>\n"
            )

        listed.add(user_id)
        listed.add(spouse_id)

    bot.send_message(
        message.chat.id,
        result,
        parse_mode='HTML'
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = tf.keras.models.load_model("C:/Users/snv-a/Desktop/–ø—Ä–æ–µ–∫—Ç/keras_model.h5", compile=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–æ–≤
class_names = open("labels.txt", "r", -1, 'utf-8').readlines()
print(class_names)

def predict_image(image_data):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(io.BytesIO(image_data)).convert("RGB")

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 224x224
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤ NumPy
    image_array = np.asarray(image)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –≤ –º–æ–¥–µ–ª—å
    data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
    data[0] = normalized_image_array

    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    prediction = model.predict(data)
    index = np.argmax(prediction)
    class_name = class_names[index]
    confidence_score = prediction[0][index]

    return class_name[2:], confidence_score

@bot.message_handler(content_types=['photo','text'])
def process_photo(message):
    if message.caption == "—Ñ–æ—Ç–æ":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_info = bot.get_file(message.photo[0].file_id)
        img_bytes = bot.download_file(file_info.file_path)

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        class_name, confidence_score = predict_image(img_bytes)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"Class: {class_name}\nConfidence Score: {confidence_score:.2f}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if confidence_score > 0.70 and class_name != None:
            bot.reply_to(message, "–≠—Ç–æ " + class_name + response)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–∏–±–æ —è –µ–≥–æ –Ω–µ –∑–Ω–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–Ω–∏–º–æ–∫.")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
muted_users = {}  # chat_id: {user_id: (until_datetime, username)}

# ‚úÖ /mute ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['mute'])
def mute_user(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π /mute –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    try:
        args = message.text.split()
        mute_minutes = int(args[1]) if len(args) > 1 else 5
    except:
        bot.reply_to(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /mute 10", parse_mode="Markdown")
        return

    user = message.reply_to_message.from_user
    chat_id = message.chat.id
    until_date = datetime.now() + timedelta(minutes=mute_minutes)

    try:
        bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )

        if chat_id not in muted_users:
            muted_users[chat_id] = {}
        muted_users[chat_id][user.id] = (until_date, user.full_name)

        bot.reply_to(message, f"üîá {user.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {mute_minutes} –º–∏–Ω.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ‚úÖ /unmute ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π /unmute –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user = message.reply_to_message.from_user
    chat_id = message.chat.id

    try:
        bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=user.id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )

        if chat_id in muted_users and user.id in muted_users[chat_id]:
            muted_users[chat_id].pop(user.id)

        bot.reply_to(message, f"üîà {user.full_name} —Ä–∞–∑–º—É—á–µ–Ω.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ‚úÖ /mutelist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö
@bot.message_handler(commands=['mutelist'])
def show_muted_list(message):
    chat_id = message.chat.id
    now = datetime.now()

    if chat_id not in muted_users or not muted_users[chat_id]:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üìÉ –ó–∞–º—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, (until, name) in muted_users[chat_id].items():
        remaining = until - now
        if remaining.total_seconds() <= 0:
            continue
        minutes = int(remaining.total_seconds() / 60)
        text += f"‚Ä¢ {name} ‚Äî –¥–æ {until.strftime('%H:%M:%S')} ({minutes} –º–∏–Ω)\n"

    bot.send_message(chat_id, text)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {chat_id: {user_id: —É—Ä–æ–≤–µ–Ω—å}}
moderators = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['administrator', 'creator']
    except:
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
def get_mod_level(chat_id, user_id):
    return moderators.get(chat_id, {}).get(user_id)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å —É—Ä–æ–≤–Ω–µ–º 1 –∏–ª–∏ –≤—ã—à–µ
def is_mod(chat_id, user_id, level=1):
    return get_mod_level(chat_id, user_id) is not None and get_mod_level(chat_id, user_id) >= level

# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ +–º–æ–¥–µ—Ä1 –∏–ª–∏ +–º–æ–¥–µ—Ä2 ‚Äî –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å —É—Ä–æ–≤–Ω–µ–º
@bot.message_handler(func=lambda msg: msg.text.lower() in ['+–º–æ–¥–µ—Ä1', '+–º–æ–¥–µ—Ä2'])
def assign_mod(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚õî –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    chat_id = message.chat.id
    from_id = message.from_user.id

    if not is_admin(chat_id, from_id):
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    level = 2 if message.text.lower() == '+–º–æ–¥–µ—Ä2' else 1
    target = message.reply_to_message.from_user

    if chat_id not in moderators:
        moderators[chat_id] = {}

    moderators[chat_id][target.id] = level
    bot.reply_to(message, f"‚úÖ {target.first_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è {level}.")

# ‚ùå –°–Ω—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda msg: msg.text.lower() == '-–º–æ–¥–µ—Ä')
def remove_mod(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚õî –ò—Å–ø–æ–ª—å–∑—É–π -–º–æ–¥–µ—Ä –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    chat_id = message.chat.id
    from_id = message.from_user.id

    if not is_admin(chat_id, from_id):
        bot.reply_to(message, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return

    target = message.reply_to_message.from_user

    if chat_id in moderators and target.id in moderators[chat_id]:
        del moderators[chat_id][target.id]
        bot.reply_to(message, f"‚ùå {target.first_name} –±–æ–ª—å—à–µ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

# üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['modlist'])
def list_mods(message):
    chat_id = message.chat.id
    if chat_id not in moderators or not moderators[chat_id]:
        bot.reply_to(message, "üì≠ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.")
        return

    mod_text = "üìã *–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
    for user_id, level in moderators[chat_id].items():
        try:
            user = bot.get_chat_member(chat_id, user_id).user
            mod_text += f"‚Ä¢ {user.first_name} ‚Äî —É—Ä–æ–≤–µ–Ω—å {level}\n"
        except:
            mod_text += f"‚Ä¢ [–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî —É—Ä–æ–≤–µ–Ω—å {level}\n"

    bot.send_message(chat_id, mod_text, parse_mode='Markdown')

try:
    bot.polling()
except Exception as e:
    print (e)
